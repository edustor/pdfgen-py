import os
import tempfile
import uuid
from datetime import datetime

import pyqrcode
import pytz
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfgen import canvas


def make_pdf(page_count, output_file, x_cells=40, y_cells=56, cell_side=5 * mm):
    """
    Makes blank Edustor pdf
    :param page_count: Count of pages to generate
    :param output_file: Output file
    :param x_cells: columns count
    :param y_cells: rows count
    :param cell_side: cell side size, in pt
    """
    c = canvas.Canvas(output_file, A4)
    pdfmetrics.registerFont(TTFont("Proxima Nova Thin", "resources/pnt.ttf"))
    c.setFont("Proxima Nova Thin", 11)

    for n in range(page_count):
        x_min, x_max, y_min, y_max = _make_grid(c, x_cells, y_cells, cell_side)

        page_id = str(uuid.uuid4())
        top_row_y = y_max + 3
        c.drawString(x_min, top_row_y, "Edustor Alpha")
        c.drawRightString(x_max, top_row_y, f"#{page_id[-12:-8]} #______")

        c.setFontSize(8)
        bottom_row_y = y_min - 8
        c.drawRightString(x_max, bottom_row_y, f"#{page_id[-12:-8]}-{page_id[-8:-4]}-{page_id[-4:]}")

        now = datetime.now(pytz.timezone("Europe/Moscow"))
        now_str = now.strftime("%a %b %d %X %Z %Y")
        copyright_string = f"Generated by Edustor PDFG on {now_str} " \
                          f"Â© Edustor Project. Dmitry Romanov, 2016-{now.year}"
        c.drawString(x_min, bottom_row_y, copyright_string)

        qr_code_side = 3 * cell_side
        _draw_qr_code(f"https://edustor.ru/p/{page_id}", c,
                      x_max - qr_code_side, y_min, qr_code_side, qr_code_side)

        c.showPage()

        print(page_id)

    c.save()


def _make_grid(c, x_cells, y_cells, cell_side):
    """
    Draws grid on canvas c
    :param c: target canvas
    :param x_cells: columns count
    :param y_cells: rows count
    :param cell_side: cell side size, in pt
    :return: Grid bounds (x_min, x_max, y_min, y_max)
    """
    c.setLineWidth(0.1)
    c.setStrokeGray(0.5)

    page_width, page_height = A4

    x_margin = (page_width - (x_cells * cell_side)) / 2
    y_margin = (page_height - (y_cells * cell_side)) / 2

    x_min, x_max = x_margin, page_width - x_margin
    y_min, y_max = y_margin, page_height - y_margin

    for xi in range(x_cells + 1):
        x = x_margin + xi * cell_side
        c.line(x, y_min, x, y_max)

    for yi in range(y_cells + 1):
        y = y_margin + yi * cell_side
        c.line(x_min, y, x_max, y)

    return x_min, x_max, y_min, y_max


def _draw_qr_code(qr_str, c, x, y, width, height):
    """
    Draws qr code to canvas
    :param qr_str: string to encode
    :param c: target canvas
    :param x: left bottom corner x coordinate
    :param y: left bottom corner y coordinate
    :param width: qr width, in pt
    :param height: qr height, in pt
    :return: None
    """
    path = tempfile.mkstemp()[1]
    pyqrcode.create(qr_str, error="L") \
        .png(path, quiet_zone=0)
    c.drawImage(path, x, y, width, height)
    os.remove(path)
